name: Build and Push Package

on:
  push:
    tags:
      - 'v*'              # Trigger on tags like v1.0.0, v1.0.1, etc.
  workflow_dispatch:      # Manual trigger from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the ns repository
    - name: Checkout ns repo
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    # Step 2: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ns-builder:latest .
    
    # Step 3: Run build script inside Docker
    - name: Build deb package in Docker
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/root/Projects \
          -w /root/Projects \
          ns-builder:latest \
          bash -c './build-deb.sh'
    
    # Step 4: Find the built deb file
    - name: Find deb package
      run: |
        # Search for .deb files in workspace
        DEB_FILE=$(find ${{ github.workspace }} -name "*.deb" -type f | head -1)
        if [ -z "$DEB_FILE" ]; then
          echo "Error: No .deb file found!"
          ls -la ${{ github.workspace }}
          exit 1
        fi
        echo "DEB_FILE=$DEB_FILE" >> $GITHUB_ENV
        echo "Found package: $DEB_FILE"
        ls -lh "$DEB_FILE"
    
    # Step 5: Extract version from the deb filename
    - name: Extract version
      run: |
        # Extract version from deb filename (e.g., ns_1.0.5_arm64.deb)
        DEB_BASENAME=$(basename "${{ env.DEB_FILE }}")
        VERSION=$(echo "$DEB_BASENAME" | sed -E 's/ns_([0-9]+\.[0-9]+\.[0-9]+)_.*/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Package version: $VERSION"
    
    # Step 6: Clone ns-package repository
    - name: Clone ns-package repo
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git clone --depth 1 \
          https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository_owner }}/ns-package.git \
          /tmp/ns-package
        cd /tmp/ns-package
        git config user.email "github-actions@github.com"
        git config user.name "GitHub Actions Bot"
    
    # Step 7: Copy deb to ns-package pool
    - name: Copy package to repository
      run: |
        mkdir -p /tmp/ns-package/pool/main/n/ns
        cp "${{ env.DEB_FILE }}" /tmp/ns-package/pool/main/n/ns/
        echo "Package copied to pool"
        ls -lh /tmp/ns-package/pool/main/n/ns/
    
    # Step 8: Update repository metadata
    - name: Update repository metadata
      run: |
        cd /tmp/ns-package
        
        # Ensure directories exist
        mkdir -p dists/focal/main/binary-arm64
        
        # Install apt-utils if not available
        sudo apt-get update && sudo apt-get install -y apt-utils
        
        # Generate Packages file
        apt-ftparchive packages pool/ > dists/focal/main/binary-arm64/Packages
        
        # Generate compressed Packages file
        gzip -k dists/focal/main/binary-arm64/Packages
        
        # Generate Release file
        apt-ftparchive release dists/focal/ > dists/focal/Release
        
        echo "Repository metadata updated"
        echo "=== Packages file ===" 
        head -30 dists/focal/main/binary-arm64/Packages
    
    # Step 9: Commit and push to ns-package
    - name: Commit and push to ns-package
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd /tmp/ns-package
        
        # Check what changed
        git status
        
        # Add all changes
        git add .
        
        # Commit with message including build info
        git commit -m "Add ns package ${{ env.VERSION }}" \
          -m "Built from: ${{ github.repository }}@${{ github.sha }}" \
          -m "Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" || echo "Nothing to commit"
        
        # Push to ns-package
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository_owner }}/ns-package.git main
    
    # Step 10: Upload deb as artifact (optional, for easy download)
    - name: Upload package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ns-package
        path: ${{ env.DEB_FILE }}
        retention-days: 30
    
    # Step 11: Create GitHub Release (optional, only on tags)
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.DEB_FILE }}
        body: |
          **NS Package ${{ env.VERSION }}**
          
          - Built for: arm64 (aarch64)
          - Package: `${{ env.DEB_FILE }}`
          - Repository: https://github.com/${{ github.repository_owner }}/ns-package
          
          **Installation:**
          ```bash
          echo "deb [trusted=yes] https://${{ github.repository_owner }}.github.io/ns-package focal main" | sudo tee /etc/apt/sources.list.d/ns.list
          sudo apt update
          sudo apt install ns
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}